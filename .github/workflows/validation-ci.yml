# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Input Validation
on:
  schedule:
    - cron: '0 0 * * SUN' # Runs at midnight every Sunday
  # Manually run this workflow on any specified branch.
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  find-scripts:
    runs-on: ubuntu-latest
    outputs: 
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      
      - id: set-matrix
        run: |
          matrix=$(python3 -c 'import os, json; print(json.dumps("{'script':" + str(os.listdir(".github/validation-ci")) + "}"))')
          echo $matrix
          echo "::set-output name=matrix::$matrix"
  
  check-matrix:
    runs-on: ubuntu-latest
    needs: find-scripts
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          matrix='${{ needs.find-scripts.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml
          echo ${{ fromJson(needs.find-scripts.outputs.matrix) }}

  validation:
    runs-on: icx
    needs: check-matrix
    strategy:
      matrix: ${{ fromJson(needs.find-scripts.outputs.matrix) }}

    steps:
      - name: Clone Repository (Latest on development)
        uses: actions/checkout@v2
        if: github.event.ref == ''
        with:
          ref: development
      - name: Clone Repository (Manual Selection)
        uses: actions/checkout@v2
        if: github.event.ref != ''
        with:
          ref: ${{ github.event.ref }}

      - name: Test Matrix
        run: |
          echo "${{ matrix.script }}"
          
  # setup:
  #   runs-on: icx
  #   steps:
  #     - name: Clone Repository (Latest on development)
  #       uses: actions/checkout@v2
  #       if: github.event.ref == ''
  #       with:
  #         ref: development
  #     - name: Clone Repository (Manual Selection)
  #       uses: actions/checkout@v2
  #       if: github.event.ref != ''
  #       with:
  #         ref: ${{ github.event.ref }}

  #     - name: Setup
  #       run: |
  #         git branch --show-current
  #         cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build
  #         cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j
  #         cmake --install ${{github.workspace}}/build

  #         CLEARTEXTLIB=${{github.workspace}}/build/lib/libhebench_example_backend.so
  #         echo "CLEARTEXTLIB=${{github.workspace}}/build/lib/libhebench_example_backend.so" >> $GITHUB_ENV

  #         # Create config.yml
  #         ${{github.workspace}}/build/bin/test_harness --config_file ${{github.workspace}}/build/config.yaml --backend_lib_path $CLEARTEXTLIB --dump
      
  #     - name: Symlink check (Load symlink to backend)
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/backend_symlink_validation.sh

  #     - name: Symlink check (Load symlink to config)
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/config_symlink_validation.sh

  #     - name: Validate .so
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/invalid_so.sh

  #     - name: Validate .yml
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/invalid_yml.sh

  #     - name: Tmp check (Load backend from tmp)
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/backend_tmp_validation.sh

  #     - name: Tmp check (Load config from tmp)
  #       working-directory: ${{github.workspace}}/build
  #       run: ../.github/validation-ci/config_tmp_validation.sh
